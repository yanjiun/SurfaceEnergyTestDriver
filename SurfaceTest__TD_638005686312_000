#!/usr/bin/python
import matplotlib
matplotlib.use('Agg')
import ase
from ase.structure import bulk
import numpy as np
from chooseSurfaces import *
from surface import *
from kimcalculator import *
from analysis import *
import simplejson
import pickle
import scipy.optimize as opt
import sys
import signal
import time

symbol = raw_input()
lattice = raw_input()
model = raw_input()
latticeconstant_global = 0

TIME_CUTOFF = 300
# in seconds
# if a surface calculation exceeds TIME_CUTOFF skips that surface 

def sweepSurfaces(calc):
    global latticeconstant_global 
    surfaceEnergyDict = {}
    surfaceLatticeVects = {}
    energies=[]
    indices_calculated=[]
    file = open('IndexList.pkl','r')
    list_of_indices = pickle.load(file)
    file.close()
    # list of indices for testing
    #list_of_indices = [[1,1,1],[1,0,0],[1,2,1],[1,1,0]]#,[1,8,9],[2,5,7]]
    latticeconstant = findLatticeConstant(calc)
    latticeconstant_global = latticeconstant

    atoms = bulk(symbol,lattice,a=latticeconstant)
    atoms.set_calculator(calc)
    unit_e_bulk = atoms.get_potential_energy()/atoms.get_number_of_atoms()
    
    # testing time for the calculation of 1 surface
    # start an alarm
    signal.signal(signal.SIGALRM, handler1)
    signal.alarm(TIME_CUTOFF)
    start_time = time.time()
    if lattice == 'fcc':
        miller = [1,1,1]
    elif lattice == 'bcc':
        miller = [1,0,0]
    else:
        miller = [1,0,0]
    E_unrelaxed, E_relaxed, surf_lattice_vect = getSurfaceEnergy(miller, calc, unit_e_bulk, latticeconstant)
    signal.alarm(0)
    end_time = time.time()
    calcTime = end_time - start_time

    signal.signal(signal.SIGALRM, handler2)
    for miller in list_of_indices:
        signal.alarm(TIME_CUTOFF)
        try:
            print miller
            E_unrelaxed, E_relaxed, surf_lattice_vect = getSurfaceEnergy(miller, calc, unit_e_bulk, latticeconstant)
            surfaceEnergyDict[tuple(miller)] = E_relaxed
            surfaceLatticeVects[tuple(miller)] = surf_lattice_vect 
            energies.append(E_relaxed)
            indices_calculated.append(miller)   
        except TimeoutException:
            print "surface took too long, skipping", miller
        except:
            raise
        signal.alarm(0)     
    return indices_calculated, np.array(energies), surfaceEnergyDict, calcTime, surfaceLatticeVects

def getSurfaceEnergy(miller, calc, unit_e_bulk, latticeconstant):
    
    surf = makeSurface(symbol,lattice,miller,size = (3, 3, 10),lattice_const=latticeconstant)
    surfvector = getSurfaceVector(surf)
    e_unrelaxed, e_relaxed = surface_energy(surf, calc)
    e_bulk = unit_e_bulk*surf.get_number_of_atoms()
    surface_vector = np.cross(surf.cell[0],surf.cell[1])
    surface_area = np.sqrt(np.dot(surface_vector,surface_vector))
    E_unrelaxed = (e_unrelaxed-e_bulk)/(2*surface_area)
    E_relaxed = (e_relaxed-e_bulk)/(2*surface_area)
    
    return E_unrelaxed, E_relaxed, surfvector

def fitBrokenBond(indices, energies, structure, n=3, p0=[0.1,0.1,0.01,0.0],correction=1):

    indices = np.array(indices)
    
    bfparams, cov_x, cost, range_error, max_error = fitSurfaceEnergies(indices,energies,structure,n=n,p0=p0,correction=correction)     

    return bfparams, cost, range_error, max_error

def fitSubSetBrokenBond(sample_indices,indices,energies,structure,n=3,p0=[0.1,0.1,0.01,0.0],correction=1):
    
    expandedIndices, expandedEnergies = expandList(indices, energies)

    sample_energies=[]

    for ind in sample_indices:
        curr_index = expandedIndices.index(ind)
        sample_energies.append(expandedEnergies[curr_index])
 
    bfparams, cost, range_error, max_error = fitBrokenBond(sample_indices, sample_energies, structure, n=n, p0 = p0,correction=correction)

    return bfparams

def plotBrokenBondFit(indices,energies,bfparams,structure,correction=1):
   
    # modify to include three cyrstallographic zone cutoffs
    plotindices, plotenergies = expandList(indices,energies)
    plotSubSet(plotindices,plotenergies,[1,-1,0],[1,1,0],bfparams,structure = structure, correction=correction)
    pylab.savefig('BrokenBondFit1-10.png')
    pylab.clf()
    plotSubSet(plotindices,plotenergies,[1,-1,2],[1,1,0],bfparams,structure = structure, correction=correction)
    pylab.savefig('BrokenBondFit1-12.png')
    pylab.clf()
    plotSubSet(plotindices,plotenergies,[1,1,-1],[0,1,1],bfparams,structure = structure,correction=correction)
    pylab.savefig('BrokenBondFit11-1.png')
    pylab.clf()

def findLatticeConstant(calc):
    """
    temporary copy of Alex's LatticeConstantCubicEnergy Test
    in the future we want to look up the result of this as input to the test
    """
    
    XTOL = 1e-8    

    nn_dist_lookup = {"sc": 1.,
        "fcc" : 1./np.sqrt(2),
        "bcc": np.sqrt(3)/2.,
        "diamond": np.sqrt(3)/4. }

    nn_dist = nn_dist_lookup[lattice]
    
    atoms = bulk(symbol,lattice,a=100)
    atoms.set_calculator(calc)
    cutoff = KIM_API_get_data_double(calc.pkim,"cutoff")[0]

    min_a = (cutoff/30.0)/nn_dist
    max_a = cutoff/nn_dist

    aopt, eopt, ier, funccalls = opt.fminbound(calcEnergy, min_a, max_a, args= (calc,),full_output = True, xtol=XTOL)

    #results = opt.fmin(calcEnergy, cutoff/2.0, args=(calc,))[0]
    
    hit_bound = False
    if np.allclose(aopt,min_a,atol=2*XTOL):
        hit_bound = True    
    elif np.allclose(aopt,max_a,atol=2*XTOL):
        hit_bound = True

    if hit_bound:
        raise Exception("Lattice constant computation hit bounds")    

    return aopt

def calcEnergy(a, calc):
    
    atoms = bulk(symbol,lattice,a=a)
    atoms.set_calculator(calc)
    try:
        energy = atoms.get_potential_energy()
    except:
        energy = 1e10
    
    return energy

def handler1(signum,frame):
    raise Exception("first calculation took too long, aborting model-test pair")

def handler2(signum,frame):
    raise TimeoutException()

class TimeoutException(Exception):
    pass


calc = KIMCalculator(model)
print "calculator established"
indices, energies, surfaceEnergyDict, calcTime, surfaceVectorDict = sweepSurfaces(calc)
print "surfaces swept"
if len(indices)>=4:
    bfparams, cost, range_error, max_error = fitBrokenBond(indices, energies, lattice)
    plotBrokenBondFit(indices,energies,bfparams,lattice)

    # fit the minimum subset and see how well it does
    samplelist = [[1,1,1],[1,0,0],[1,1,2],[1,0,1]] 
    subbfparams = fitSubSetBrokenBond(samplelist,indices,energies,lattice)
    subfitcost = np.sum(abs(residual(subbfparams,numpy.array(indices),energies,1,lattice)/energies))/len(indices)/cost
else:
    bfparams = None
    range_error = None
    max_error = None
    subbfparams = None
    subfitcost = None


#=======================================================
# formatting the output for pipeline integration
#=======================================================
def getFileInfo(filename):
    import os, hashlib
    dct = {}
    abspath = os.path.abspath(filename)
    dct['filename'] = filename
    dct['path'] = os.path.dirname(abspath)
    dct['extension'] = os.path.splitext(filename)[1]
    dct['size'] = os.path.getsize(abspath)
    dct['created'] = os.path.getctime(abspath)
    dct['hash'] = hashlib.md5(open(abspath, 'rb').read()).hexdigest()
    dct['desc'] = "Plot of the broken bond fit"
    return dct

latex_forms = {
        'fcc': "E_{FCC} (\\vec{n}) = p_1 (4 \left( |x+y| + |x-y| + |x+z| + |x-z| + |z+y| +|z-y|\\right)) + p_2 (8 \left( |x| + |y| + |z|\\right))  + p_3 (2 ( |x+ 2y + z| + |x+2y-z| + |x-2y + z| + |x-2y-z| + |2x+y+z| + |2x+y-z| +|2x-y+z| +|2x-y-z| +|x+y+2z| +|x+y-2z| +|x-y+2z| +|x-y-2z| ) + c", 
        'bcc': "E_{BCC} (\\vec{n}) = p_1 (6 \left( | x+y+z| + |x+y-z| + |-x+y-z| + |x-y+z| \\right)) + p_2 (8 \left( |x| + |y| + |z|\\right)) + p_3 (4 \left( |x+y| + |x-y| + |x+z| + |x-z| + |z+y| +|z-y|\\right)) +c"
        }

python_forms = {
    'fcc':
    """
    def BrokenBondFCC(params, index):

        import numpy
        x, y, z = index
        x = x / numpy.sqrt(x**2.+y**2.+z**2.)
        y = y / numpy.sqrt(x**2.+y**2.+z**2.)
        z = z / numpy.sqrt(x**2.+y**2.+z**2.)

        return params[0]*4* (abs(x+y) + abs(x-y) + abs(x+z) + abs(x-z) + abs(z+y) + abs(z-y)) + params[1]*8*(abs(x) + abs(y) + abs(z)) + params[2]*(abs(x+2*y+z) + abs(x+2*y-z) +abs(x-2*y+z) +abs(x-2*y-z) + abs(2*x+y+z) +abs(2*x+y-z) +abs(2*x-y+z) +abs(2*x-y-z) + abs(x+y+2*z) +abs(x+y-2*z) +abs(x-y+2*z) +abs(x-y-2*z))+params[3]
     """,

     'bcc':
     """
     def BrokenBondBCC(params, x, y, z):

         import numpy
         x, y, z = index
         x = x / numpy.sqrt(x**2.+y**2.+z**2.)
         y = y / numpy.sqrt(x**2.+y**2.+z**2.)
         z = z / numpy.sqrt(x**2.+y**2.+z**2.)

         return params[0]*6*(abs(x+y+z) + abs(x-y-z) + abs(x-y+z) + abs(x+y-z)) + params[1]*8*(abs(x) + abs(y) + abs(z)) + params[2]*4* (abs(x+y) + abs(x-y) + abs(x+z) + abs(x-z) + abs(z+y) + abs(z-y)) + params[3] 
     """
     }

energies = []
for key,val in surfaceEnergyDict.iteritems():
    energies.append({"miller_index": key, "surface_energy": val, "surface": surfaceVectorDict[key]})

plotfiles = []
for name in ["BrokenBondFit1-10.png", "BrokenBondFit1-12.png", "BrokenBondFit11-1.png"]:
    plotfiles.append(getFileInfo(name))

# dump all the stuff we calculated into one large dictionary
if bfparams!=None:
    results = {'BrokenBond_P1': bfparams[0], \
        'BrokenBond_P2':bfparams[1], \
        'BrokenBond_P3':bfparams[2], \
        'CorrectionParameter':bfparams[3],
        'ErrorRange':range_error,
        'MaxResidual':max_error,
        'SubsetPredictionQuality': subfitcost, 

        "calculationTimeForTestSurface" : calcTime,
        "crystal_structure": lattice,
        "element": symbol,
        "lattice_constant": latticeconstant_global,
        "formula_latex": latex_forms[lattice],
        "formula_python": python_forms[lattice],

        "plotfiles": plotfiles,
        "energies": energies}
else:
    results = {"calculationTimeForTestSurface":calcTime,\
         "message from test":"not enough surface energy results for fit",
         "energies": energies}

print simplejson.dumps(results)
sys.exit(0)
